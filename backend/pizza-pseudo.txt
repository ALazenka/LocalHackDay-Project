Sauce:

Pepperoni
Sausage
Peppers
Onions
Mushrooms

Slides



1st: convert # slices to pizza combinations:

What goes on each pizza?
	Don't give anyone any toppings that they DIDN'T WANT
	Maxmize the toppings that people wanted


Tate: Pepperoni, Sausage, Peppers, Mushrooms
Micheal: Pepperoni, Peppers, Mushrooms
Andrew: Pepperoni
Matt: Pepperoni

S-4, M-6, L-8, XL-12

[1, 1, 0, 1, 1] : 5
[1, 1, 0, 1, 0] : 7
[1, 1, 0, 0, 0] : 5
[1, 0, 0, 0, 0] : 3
[0, 1, 0, 0, 0] : 2

XL P
XL S

---------------

M [1, 1, 0, 1, 1]
M [1, 1, 0, 1, 0]
L [0]

-----------------------
(S)[0, 1, 0, 0, 0] : 2 -> 4
(S)[1, 0, 0, 0, 0] : 3 -> 4
(M)[1, 1, 0, 1, 0] : 6!
(M)[1, 1, 0, 1, 1] : 5 -> 6 (whatever) 

--------------------

(S)[0, 1, 0, 0, 0]
(XL)1, 0, 0, 0, 0] -> 12
(XL[1, 1, 0, 0, 0] -> 12

------------------------

[0, 1, 0, 0, 0] : S







Need to find a column that has all 1s
Find topping groupings with most people.


Find highest shallow grouping: subtract # slices from each

Group same people together & treat as 1.
Find most specific person: Find all matches, subtract from each.
	In case of not enough slices for a pizza: subtract from most specific people that don't match anyone else (group with lowest # of slices).
Once that is depleted, move to next most specific person.

Problems: Doesn't necessarily maximize? It minimizes fuck ups but doesn't maximize toppings

People who order small(4) slices of pizza and don't match get their own pizza
Group people together????????????????



3 ways:
Maximize Toppings
Minimize Cost
Voting for whole pizzas
More toppings means your topping is less valuable????????